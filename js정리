★코멘트(주석) 
 // 주석입니당
 /* 전체
	주석
	입니다
 */
★변수와 상수
변수이름은 숫자로 시작하면 오류
var asd_zxc // 가능
var asd&azx // 가능
var 1asd = 1; // 오류
const MAX_LEVEL //const 이름은 항상 대문자. 상수는 변경 불가능 초기값 설정해줘야 함.

★자료형
typeof 변수명; //변수의 타입을 알 수 있음
x++ x-- //증감연산자 사용이 가능.

★논리형
3 == '3' //데이터타입이 달라도 값이 같다면 true
3 ==='3' // 테이터타입까지 고려하므로 flase

★형변환
Number(String 변수) //number로 타입변환

★문자열과 배열
배열은 'mutable(바뀔 수 있는)' 자료형인 반면 문자열은 'immutable(바뀔 수 없는)' 자료형

★2차원 배열
var product = ['['','',]','','',''];
product[0][1];

★자바스크립트 내장 함수
함수		내용
String()		숫자를 문자열로 변환해주는 함수.
Number()		문자열을 숫자로 변환해주는 함수.
parseInt()		문자열 안에서 정수를 뽑아주는 함수.
parseFloat()	문자열 안에서 숫자(소수 포함)를 뽑아주는 함수.
alert()		사용자에게 메시지를 띄워주는 함수.
prompt()		사용자에게 메시지를 띄우고, 문자열을 입력받는 함수.
confirm()		사용자에게 메시지를 띄우고, 확인과 취소 중 하나를 누르게 하는 함수.

null은 비어있는 값이고, undefined는 변수에 아무것도 할당되지 않았을 때의 값입

NaN은 'Not a Number'의 약자 숫자가 아닌 것을 숫자로 표현하려 할 때 반환

$('button').attr('id') // button 속성의 id 값 가져오기.
$('
$('#email_input').val(); //id가 email_input이란 곳에서 값 가져오기.

// 선택 //     .   // 동작 //
$('#hello')   .   on('click', sayHello);
$('#hello')   .   text();
$('#hello')   .   css('background', '#7f8ff4');

// item에 header이라는 클래스가 없으면 추가, 있으면 제거
$('#item').toggleClass('header');

// item에 header라는 클래스가 있으면 true, 없으면 false 리턴
$("#item").hasClass('header');

// 이미지 태그의 src 속성 받아오기
$('img').attr('src');

// 이미지 태그의 src 속성 지정하기
$('img').attr('src', 'images/logo.png');

// h1 태그의 텍스트 받아오기
$('h1').text();

// h1 태그에 텍스트 지정하기
$('h1').text('Hello World!');

// h1 태그에 HTML 텍스트 지정하기
$('h1').html('<b>Hello World!</b>');

//모든 li태그 뒤에 추가하기
$('li').after('<li class="item"> 새로운 아이템</li>');

//형제 요소 추가함.
$('#todo-list li:last-child').after

//child 요소 추가
$('ul').append('<li class="item"> 새로운 아이템</li>');  //마지막 자식으로 들어감 prepend가 첫 자식으로

//요소 이동시키기
$('#cleaning).before('<li class="item">피아노</li>'); //새로운 요소 추가
$('#cleaning).before('#movie'); //추가됨
-> 이미 있는 건 id 값이나 class값으로 넣어주면 됨.

//요소 삭제
$('#movie').remove()


<div class="box" id="box-1">
    <button class="color-1">-</button>
    <button class="color-2">-</button>
    <button class="color-3">-</button>
    <button class="color-4">-</button>
  </div>

  <div class="box" id="box-2">
    <button class="color-1">-</button>
    <button class="color-2">-</button>
    <button class="color-3">-</button>
    <button class="color-4">-</button>
  </div>
--------------------------------------------------------------------------------------------------------
<script>
    $('#box-1 button').text('SELECTED!');
    $('#box-2 button').filter('.color-3').text('SELECTED!');
  </script>

<script>
    $('#box-1 button').text('SELECTED!');
    $('#box-2 button').not('.color-3').text('SELECTED!'); //color-3 빼고 다 selected!
  </script>

--------------------------------------------------------------------------------------------------------
$('#btn-1').parent().css('background-color', 'black');
$('#box-1').children().css('background-color', 'black'); //children("찾기 가능") 직속 자녀만 찾아줌
--------------------------------------------------------------------------------------------------------
find  //모든 자식 다 찾아줌.
$('#box-1').find('.color-2').css('background-color', 'black');

find()는 선택된 요소의 자녀, 자녀의 자녀, ... 를 골라주되, 조건에 맞는 요소만 골라서 찾아줍니다.
위 코드는 box-1의 자녀 요소 중 color-2 클래스가 있는 요소의 css를 적용해줍니다.
--------------------------------------------------------------------------------------------------------
siblings //이웃 요소를 찾아줌
$('#btn-1').siblings().text('SELECTED!');

--------------------------------------------------------------------------------------------------------
siblings()는 선택된 요소의 이웃 요소들을 골라줍니다.
위 코드에서는 btn-1의 모든 이웃 요소에 text를 변경해줍니다.
() 안에 조건을 넣을 경우, filter역할도 함께 해줍니다.


--------------------------------------------------------------------------------------------------------
이벤트 객체 알아보기
console.log(event) //event 객체에 대한 정보를 확인해 볼 수 있음.
--------------------------------------------------------------------------------------------------------
이벤트 핸들러
event // 이벤트 객체임.
keydown
click 같은 것들이 있음.
$(document).on('keydown', keyboardInput);
위와 같이 이벤트를 등록하면, 이벤트 핸들러 함수(keyboardInput)를 호출하는 코드가 
자바스크립트 내부에 이미 구현되어 있습니다. 그래서 이벤트 객체를 사용하고자 할 경우, 
함수 선언 부분에 파라미터를 넣는 것만으로 이벤트 객체의 전달이 가능해집니다.
// 이벤트 객체를 사용할 경우
function keyboardInput(e) {
  console.log(e.key);
--------------------------------------------------------------------------------------------------------

event.currentTarget.id//선택된 요소
--------------------------------------------------------------------------------------------------------

마우스 이벤트
이벤트	설명
mouseover	마우스 포인터가 영역 위로 올라올 경우 발생
mouseout	마우스 포인터가 영역에서 벗어날 경우 발생
mousedown	마우스 버튼을 누를 경우 발생
mouseup	마우스 버튼을 눌렀다 놓을 경우 발생
mousemove	마우스를 움직일 경우 발생
dbclick	더블클릭시 발생
dragdrop	마우스를 드래그할 때 발생

--------------------------------------------------------------------------------------------------------
키보드 이벤트
이벤트	설명
keydown	키보드의 버튼이 내려가는 순간 발생하는 이벤트
keypress	키보드의 버튼이 내려가는 순간 발생하는 이벤트 ('a', '5' 등 출력이 가능한 키에서만 동작하며, Enter, Esc 등의 키에는 반응하지 않음)
keyup	눌러진 키보드의 버튼이 다시 올라오면서 발생하는 이벤트

--------------------------------------------------------------------------------------------------------
포커스 이벤트
이벤트	설명
focus	포커스가 위치할 경우 발생
blur	포커스를 다른곳으로 옮길 경우 발생

--------------------------------------------------------------------------------------------------------
입력 이벤트
이벤트	설명
change	선택 값을 바꿀 경우 발생
input	사용자가 입력을 하는 경우 발생
select	입력 양식의 하나가 선택될 때 발생
submit	폼을 전송하는 경우 발생

--------------------------------------------------------------------------------------------------------
윈도우 창 이벤트
이벤트	설명
move	윈도우나 프레임을 움직일 때 발생
resize	윈도우나 프레임 사이즈를 움직일 때 발생

--------------------------------------------------------------------------------------------------------
익명함수
$(document).ready(function(){
     $('#hello').on('click', function(){
         alert($('#hello').text());
         $(#'hello').css('background', '#7f8ff4');
      });
   });
--------------------------------------------------------------------------------------------------------
$(window).on('scroll', functino(){ //브라우저가 실행되고 스크롤을 하면 실행되는 익명함수.
   $(window).scrollTop()

})
--------------------------------------------------------------------------------------------------------
//와 같이 작성하면 div태그가 left: 250px만큼 이동하면서 동시에 opacity: 0.5가 적용됩니다.
$("div").animate({left: '250px', opacity: '0.5'}); 

--------------------------------------------------------------------------------------------------------
$("div").animate({left: '250px'});
$("div").animate({opacity: '0.5'});
라고 작성하면 div태그가 left: 250px만큼 이동한 후, opacity: 0.5가 적용됩니다.

--------------------------------------------------------------------------------------------------------
$("div").animate({left: '+=250px'});
와 같이 작성하면 div태그가 left: 250px만큼, 버튼을 누를 때 마다 계속해서 이동합니다.


--------------------------------------------------------------------------------------------------------
$("div").animate({left: '250px'}, 1000, 'easeOutElastic');
와 같이 작성하면 div태그가 left: 250px만큼 1초 동안 이동하되, easeOutElastic 효과가 적용됩니다.

이런 애니메이션 이펙트를 'Easing'이라고 부르는데, 
'Easing' 효과에는 linear, swing, easeInBounce, easeOutBounce, easeInOutBounce 등 
다양한 종류가 있습니다.

--------------------------------------------------------------------------------------------------------

$('.vertical-center').animate({top : '0', opacity:'1'});
















